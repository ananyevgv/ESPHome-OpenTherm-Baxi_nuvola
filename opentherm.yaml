substitutions:
  devicename: opentherm
  upper_devicename: Opentherm

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  includes:
  - my_components/opentherm/

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


captive_portal:
logger:
api:
ota:

custom_component:
  - lambda: |-
      auto opentherm = new OpenthermComponent();
      return {opentherm};
    components:
      - id: opentherm

output:
  - platform: custom
    type: float
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      auto opentherm_pid_output = new OpenthermFloatOutput();
      openthermComp->set_pid_output(opentherm_pid_output);
      App.register_component(opentherm_pid_output);     
      return {opentherm_pid_output};
    outputs:
      id: pid_output
      #min_power: 30.00%
      #max_power: 60.00%
sensor:
  - platform: custom
    lambda: |-    
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return { 
        openthermComp->boiler_temperature, 
        openthermComp->external_temperature_sensor, 
        openthermComp->Efault_sensor,
        openthermComp->modulation_sensor,
        openthermComp->heating_target_temperature_sensor
      };
    sensors:
    - name: Boiler Temperature
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "External Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 0  
    - name: "Error"
      accuracy_decimals: 0    
    - name: "Boiler Modulation"
      unit_of_measurement: "%"
      accuracy_decimals: 0
      id: modulation
    - name: "Heating Target Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
      
  - platform: homeassistant
    id: temperature_sensor
    entity_id: sensor.kitchen_t
    name: "Actual temperature"
    unit_of_measurement: °C
  - platform: template
    id: temperature_sensor_interval
    name: "Actual temperature interval"
    lambda: |-
      return id(temperature_sensor).state;
    update_interval: 1s
  - platform: pid
    name: "PID Climate Result"
    type: RESULT    
  - platform: pid
    name: "PID Climate HEAT"
    type: HEAT    
  - platform: pid
    name: "PID Climate ERROR"
    type: ERROR    
    
  - platform: copy 
    source_id: modulation
    name: "${upper_devicename} power"
    filters:
      - lambda: return (x * 0.24);
    unit_of_measurement: "kW"
    device_class: "power"
    id: boiler_power
    
  - platform: total_daily_energy
    name: "${upper_devicename} Total Daily Energy"
    power_id: boiler_power
    
binary_sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->flame,
        openthermComp->diagnostic,
        openthermComp->fault
      };
    binary_sensors:
    - name: "Flame"
    - name: "Diagnostic"
    - name: "Fault"

      #device_class: heat

switch:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {openthermComp->thermostatSwitch};
    switches:
      name: "Disable PID"
  - platform: template
    name: "PID Climate Autotune"
    turn_on_action:
      - climate.pid.autotune: pid_climate      

climate:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->hotWaterClimate, 
        openthermComp->heatingWaterClimate
      };
    climates:
      - id: hot_water
        name: "Hot water"
      - id: heating_water
        name: "Heating water"
  - platform: pid
    id: pid_climate
    name: "PID Climate Controller"
    visual:
      min_temperature: 16 °C
      max_temperature: 28 °C
      temperature_step: 0.5 °C
    sensor: temperature_sensor_interval
    default_target_temperature: 20°C
    heat_output: pid_output
    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0
text_sensor:
  - platform: template
    name: "Ошибка котла"
    id: error_boiler
    lambda: |-
      uint8_t var = (id(error).state);
      switch (var) {
        case 0: return std::string("Ошибок нет");
        case 1: return std::string("E01 Отсутствие розжига");
        case 2: return std::string("E02 Сработал защитный термостат от перегрева");
        case 3: return std::string("E03 Сработал защитный датчик тяги");
        case 4: return std::string("E04 Частый срыв пламени");        
        case 5: return std::string("E05 Неисправность датчика отопления");
        case 6: return std::string("E06 Неисправность датчика контура ГВС");
        case 10: return std::string("E10 Неисправность датчика давления воды");
        case 11: return std::string("E11 Неисправность открытия входа внешнего программируемого датчика температуры (= 04)");
        case 12: return std::string("E12 Нет разрешения от дифференциального датчика гидравлического давления (прессостата)");
        case 13: return std::string("E13 Залипание контактов дифференциального гидравлического прессостата");
        case 18: return std::string("E18 Включено заполнение системы (замечание)");
        case 19: return std::string("E19 Неисправность при заполнения системы");
        case 25: return std::string("E25 Воздых в системе");
        case 35: return std::string("E35 Паразитное пламя (ошибка пламени)");
        case 80 ... 96: return std::string("E80-96 Ошибка сьемной панели)");
        case 97: return std::string("E97 Неправильная частота сети электропитания)");
        case 98: return std::string("E98 Проблема с контактами реле газового клапана, внутренняя ошибка");
        case 99: return std::string("E99 Проблема котактов реле, внутренняя ошибка");
        default: return std::string("Неизвестная ошибка");
      } 
time:
  - platform: sntp
    id: homeassistant_time
    timezone:  Europe/Moscow #"MSK-2MSD,M3.5.0/2,M10.5.0/3"
    servers: !secret sntp
    
web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret web_pass
